# My github: https://github.com/trip5
substitutions:
  name:  xy-clock-blue
  friendly_name: XY-Clock-Blue
  comment: "EHLClock from Trip5"
  project_version: "2024.10.29"
  project_name: Trip5.EspHomeLedClock
  waiting: "EHLC" # shows when waiting for time

  # Time zone can be Olsen type ("Asia/Seoul") # Check https://en.wikipedia.org/wiki/List_of_tz_database_time_zones
  # Or it can be POSIX format: (ie "KST-9" & "PST8PDT,M3.2.0/2:00:00,M11.1.0/2:00:00" & "AST4ADT,M3.2.0,M11.1.0")
  # Time zone must be POSIX format: (ie "KST-9" & "PST8PDT,M3.2.0/2:00:00,M11.1.0/2:00:00" & "AST4ADT,M3.2.0,M11.1.0")
  # Most can be viewed here: https://github.com/nayarsystems/posix_tz_db/blob/master/zones.csv
  # or here: https://support.cyberdata.net/portal/en/kb/articles/010d63c0cfce3676151e1f2d5442e311
  # If you need to make a custom POSIX format you can look here: https://developer.ibm.com/articles/au-aix-posix/)
  # or even better, use this POSIX Generator (courtesy of TopYuan): https://www.topyuan.top/posix
  time_zone: "KST-9"

# Pins for I2C RTC are same for Sinilink and 303 Clocks
  scl_pin: GPIO12
  sda_pin: GPIO13
# SPI TM1637 or similar? Specify clk & dio pins here, delete the above 2 lines (if no RTC) and edit the rest of the file carefully!
#  clk_pin: GPIO16
#  dio_pin: GPIO17

# Mappings are the order of the LED segments. Using the wrong mapping will result in a garbled display!
  segment_mapping: PGFEDCBA # Specific to the Sinilink XY-Clock
#  segment_mapping: GBPEDCAF # Specific to 303WIFILC01
#  TM1637 units which support the colon will work with any segment mapping (PM dot is ignored by the hardware)
#  * Actually TM1637 doesn't use segment mapping but the routines that make the blinking colon depend on a segment_mapping being specified)
#  segment_mapping: PABCDEFG # normal TM1650 (untested)

# Sinilink Clock uses these pins for buttons
  down_button_pin: GPIO9
  up_button_pin: GPIO10 
  set_button_pin: GPIO16
# 303 Clock uses these pins for buttons
#  down_button_pin: GPIO15
#  up_button_pin: GPIO4
#  set_button_pin: GPIO0

# Sinilink Clock has these additional GPIOs (the blue LED looks better for status)
  status_led_pin: GPIO0
  other_led_pin: GPIO2
  buzzer_pin: GPIO5
  key_pin: GPIO14 #	Contact 'KEY' (unused)
# The 303 only has 1 LED (uncomment next line and delete the above 4 lines)
#  status_led_pin: GPIO2

# Hard-coded variables (removed from UI because of memory constraints)
  wifi_stop_seek_time: "60" # How many seconds to give up trying to connect to Wifi: 60 to 315 (do not go outside these numbers)
  time_sync_interval: "8" # How often to sync the RTC: 1 to 24 (hours)

esphome:
  name: $name
  comment: "$comment"
  project:
    name: "$project_name"
    version: "$project_version"
  min_version: 2023.11.0
  on_boot:
    - priority: 600
      then:
        - globals.set:
            id: segmentmap
            value: !lambda 'return "$segment_mapping";'
        - lambda: 'id(display_off) = false;'
# The Sinilink uses a DS1307 RTC (supported by ESPHome)
        - ds1307.read_time:
# The 303 uses a DS1302 RTC (will also require an external component)
#        - ds1302.read_time:
        - globals.set:
            id: sync_time
            value: !lambda 'return $time_sync_interval;'
        - globals.set:
            id: wifi_stop_seek_time
            value: !lambda 'return ($wifi_stop_seek_time - 60);'
    - priority: -100
      then:
        - wait_until:
            condition:
              - lambda: 'return (id(my_time).now().is_valid());'
# The Sinilink uses a DS1307 RTC
        - ds1307.write_time:
# The 303 uses a DS1302 RTC
#        - ds1302.write_time:


esp8266:
  board: esp8285
  restore_from_flash: True
  
wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  reboot_timeout: 0s # reboot if no wifi (must be disabled for wifi to be turned off)
  enable_on_boot: True
  id: wifi_id
  ap:
    ssid: $name
    password: !secret ap_password
    ap_timeout: 10s # this has to be short, especially if using Stop Seek Wifi
  on_connect:
    - logger.log: "Wifi connected"
    - light.turn_off: led1
    - delay: 1s
    - button.press: display_ip
    - lambda: |-
        id(wifi_stop_seek_time_count) = 0;
        id(my_time)->update();
  on_disconnect:
    - if:
        condition:
          - lambda: 'return (id(wifi_stop_seek) == true);'
        then:
          - logger.log: "Wifi disconnected - will be disabled soon (stop seek is on)..."
        else:
          - logger.log: "Wifi disconnected"
    - delay: 1s
    - button.press: display_ip

external_components:
# Use Trip5's fork of Buzzer13's TM1650 ESPHome Component
  - source:
      type: git
      url: https://github.com/trip5/esphome-tm1650
      ref: main
    refresh: 60s
    components: [ tm1650 ]
# Prefer a local source (only use one source)
#  - source:
#      type: local
#      path: my-components/EHCL-Clock # e.g. /config/esphome/components
#    components: [ tm1650 ]
#    refresh: 1s

# The 303 Clock has a DS1302 RTC (uncomment this section to use it), use Trip5's fork of Trombik's DS1302 ESPHome Component
#  - source:
#      type: git
#      url: https://github.com/trip5/esphome-ds1302
#      ref: main
#    refresh: 60s
#    components: [ ds1302 ]

time:
  - platform: sntp # use SNTP as a time source
    id: my_time
    timezone: "$time_zone"
    update_interval: 24h # This seems like the longest safe amount of time - actual configured update happens in interval section

# The Sinilink Clock uses a DS1307 RTC
  - platform: ds1307
    timezone: "$time_zone"
    update_interval: never

# The 303 Clock uses a DS1302 RTC (uncomment this section and delete the above DS1307 section if needed)
#  - platform: ds1302
#    cs_pin: GPIO5
#    dio_pin: GPIO14
#    clk_pin: GPIO16
#    update_interval: never
#    timezone: "$time_zone"

script:
  - id: sync_the_time
    mode: restart
    then:
      - lambda: 'id(my_time)->update();'
# The Sinilink Clock uses a DS1307 RTC
      - ds1307.write_time:
# The 303 Clock uses a DS1302 RTC (uncomment this and delete the other if needed)
#      - ds1302.write_time:
  - id: display_off_activate
    mode: restart
    then:
      - lambda: |-
          ESP_LOGD("main", "Display Off activated");
          id(display_off) = true;
  - id: display_off_deactivate
    mode: restart
    then:
      - lambda: |-
          ESP_LOGD("main", "Display Off deactivated");
          id(display_off_time_count) = 0;
          id(display_off) = false;

api:
  reboot_timeout: 0s # Must be disabled to allow the Wifi enable/disable to function

mdns:
  disabled: false

# Enable logging (and stops the various sensors/switches from spamming the log)
# Note that increasing the level uses up memory (which this device has very little available) and may cause errors and/or crashing
logger:
  level: DEBUG
  logs:
    sensor: ERROR
    text_sensor: NONE
    switch: NONE
    light: NONE
    number: NONE
    rtttl: NONE

ota:
  - platform: esphome
    password: !secret ota_password
    # a note here that for some reason these clocks seem unable to do a "pretty" OTA update
    # but leaving the code here in hopes that it does work in the future
    on_begin:
      then:
        - lambda: 'id(tm_display).print("OtA");'
        - logger.log: "OTA Update started."
    on_progress:
      then:
        - lambda: 'id(tm_display).printf("%d", (int)x);'
        - logger.log:
            format: "OTA progress %0.1f%%"
            args: ["x"]
    on_end:
      then:
        - lambda: 'id(tm_display).print("done");'
        - logger.log: "OTA end"
    on_error:
      then:
        - lambda: 'id(tm_display).print("Err");'
        - logger.log:
            format: "OTA update error %d"
            args: ["x"]

web_server:
  port: 80
  ota: true
  include_internal: false
  version: 2
  local: true # will download www.js and serve it directly from the clock

captive_portal:

text_sensor:
  - platform: version
    name: "$friendly_name ESPHome Version"
    hide_timestamp: true
    entity_category: diagnostic
  - platform: wifi_info
    ip_address:
      id: wifi_ip
      name: "$friendly_name IP Address"
      entity_category: diagnostic
    ssid:
      id: wifi_ssid
      name: "$friendly_name SSID"
      entity_category: diagnostic
  - platform: template
    name: "${friendly_name} ${project_name} Version"
    lambda: 'return to_string("$project_version");'
    entity_category: diagnostic
    update_interval: 1h
  - platform: template
    name: "$friendly_name Time Zone"
    lambda: 'return {"$time_zone"};'
    entity_category: diagnostic
    update_interval: 1h

output:
  - platform: esp8266_pwm
    id: statusled
    pin:
      number: $status_led_pin
      inverted: true

light:
  - platform: monochromatic
    id: led1
    name: "LED"
    output: statusled
    internal: true

# Sinilink has 2 LEDs and this will remap the 2nd LED as a status LED but its blinking can be distracting so I've commented it out / 303 Clock can't use it anyway
#status_led:
#  pin:
#    number: $other_led_pin
#    inverted: true

preferences:
  flash_write_interval: 15s # 0 does immediate write to memory with no mem buffer (not recommended) (only saves when persistent variables have changed)

i2c:
  sda: $sda_pin
  scl: $scl_pin
  scan: true
  id: i2cbus
  
# Check this section carefully!
# Also, some info how to handle multi_click options: https://community.home-assistant.io/t/esphome-button-held-double-press/136083/10
binary_sensor:
  - platform: status
    name: "$friendly_name Status"
  - platform: gpio
    pin:
      number: $up_button_pin
      inverted: true # Sinilink true / 303 true
      mode: INPUT_PULLUP
    name: "$friendly_name Up button"
    filters:
      - delayed_on: 10ms
      - delayed_off: 10ms
    on_multi_click:
      #Click UP will increase brightness
      - timing:
          - ON for at most 0.5s
          - OFF for at least 0.5s
        then:
          if:
            condition:
              - lambda: 'return id(display_off);'
            then:
              - script.execute: display_off_deactivate
            else:
              - number.increment: brightness_select
      #Hold UP will toggle the wifi timeout
      - timing:
          - ON for at least 1s
        then:
          if:
            condition:
              - lambda: 'return id(display_off);'
            then:
              - script.execute: display_off_deactivate
            else:
              - switch.toggle: wifi_stop_seek_select       
  - platform: gpio
    pin:
      number: $down_button_pin
      inverted: true # Sinilink true / 303 false
      mode: INPUT_PULLUP
    name: "$friendly_name Down button"
    filters:
      - delayed_on: 10ms
      - delayed_off: 10ms
    on_multi_click:
      #Click DOWN will decrease brightness
      - timing:
          - ON for at most 0.5s
          - OFF for at least 0.5s
        then:
          if:
            condition:
              - lambda: 'return id(display_off);'
            then:
              - script.execute: display_off_deactivate
            else:
              - number.decrement: brightness_select
      #Hold DOWN will select enable or disable time zone offset
      - timing:
          - ON for at least 1s
        then:
          if:
            condition:
              - lambda: 'return id(display_off);'
            then:
              - script.execute: display_off_deactivate
            else:
              - switch.toggle: tzoffset_on_select
  - platform: gpio
    pin: 
      number: $set_button_pin
      inverted: true # Sinilink true / 303 true
    name: "$friendly_name Set button"
    filters:
      - delayed_on: 10ms
      - delayed_off: 10ms
    on_multi_click:
      #Click SET will toggle 12-hour mode
      - timing:
          - ON for at most 0.5s
          - OFF for at least 0.5s
        then:
          if:
            condition:
              - lambda: 'return id(display_off);'
            then:
              - script.execute: display_off_deactivate
            else:
              - switch.toggle: hour12_select
      #Hold SET will show the IP Address
      - timing:
          - ON for at least 1s
        then:
          - button.press: display_ip

# This section contains a lot of lambda code... if using the Sinilink or 303, you shouldn't have to edit this at all
# If using something else, you may need to edit the segmentmap sections (conveniently 'if' sections), depending on how the decimals/colons are handled
# If that's true, get back to me on github by opening an issue and help contribute to other displays this YAML can handle!
# If using a TM1637, you should change the platform to tm1637 and check a few lines just below here
display:
  - platform: tm1650
    id: tm_display
    update_interval: 1s
    length: 4
    segment_map: $segment_mapping
    i2c_id: i2cbus
    # TM1637: remove the above 2 lines and uncomment the next 2 lines
    # clk_pin: $clk_pin
    # dio_pin: $dio_pin
    # If you are using either the Sinilink or 303, there should be no need to edit anything inside this lambda below!
    lambda: |-
      // Display the message if all conditions are met
      if (id(my_time).now().is_valid()) {
        if ((id(message_alive_time) != 0) && (id(message_clock_time_count) >= id(message_clock_time))) {
          id(message_display_time_count) += 1;
          id(message_alive_time_count) += 1;
          auto message_text = id(message);
          it.print(0, message_text.c_str());
          if (id(message_display_time_count) >= id(message_display_time)) {
            id(message_display_time_count) = 0;
            id(message_clock_time_count) = 0;
            if (id(message_alive_time_count) >= id(message_alive_time)) {
              id(message_alive_time_count) = 0;
              id(message_alive_time) = 0;
              ESP_LOGD("main", "Message Alive Time finished.");
            }
          }
        } else {
            if ((id(message_alive_time) != 0) && (id(message_clock_time) != 0)) {
              id(message_clock_time_count) += 1;
              id(message_alive_time_count) += 1;
            }
            static int blinking = false;
            // apply offset if needed https://community.home-assistant.io/t/multiple-time-zones/435315/12
            int offset = 0;
            if (id(tzoffset_on) != false) {
              offset = (int)(60*60*(id(tzoffset)));
            }
            std::time_t tz1time = (id(my_time).now().timestamp + offset);
            std::tm *tz1time_astm = localtime(&tz1time);
            // check if the date should be displayed
            if ((id(time_display_count) >= (id(time_display_time))) && (id(date_display_mode) != false)) {
              id(date_display_count) += 1;
              // display date
              int tzmon = (tz1time_astm->tm_mon) + 1;
              int tzmday = tz1time_astm->tm_mday;
              std::string timemon_text = std::to_string(tzmon);
              std::string timemday_text = std::to_string(tzmday);
              std::string mon_a = (timemon_text.substr(0,1).c_str());
              std::string mon_b = (timemon_text.substr(1,1).c_str());
              std::string mday_a = (timemday_text.substr(0,1).c_str());
              std::string mday_b = (timemday_text.substr(1,1).c_str());
              if (tzmon < 10) {
                mon_b = mon_a;
                mon_a = "0";
              }
              if (tzmday < 10) {
                mday_b = mday_a;
                mday_a = "0";
              }
              if (id(date_display_mode_us) != false) {
                it.print(0, mday_a.c_str());
                it.print(1, mday_b.c_str());
                it.print(2, mon_a.c_str());
                it.print(3, mon_b.c_str());
              } else {
                it.print(0, mon_a.c_str());
                it.print(1, mon_b.c_str());
                it.print(2, mday_a.c_str());
                it.print(3, mday_b.c_str());
              }
              if (id(date_display_count) >= id(date_display_time)) {
                id(time_display_count) = 0;
              }
            } else {
              // display time
              id(date_display_count) = 0;
              id(time_display_count) += 1;
              int tzhr = tz1time_astm->tm_hour;
              int tzmin = tz1time_astm->tm_min;
              std::string timeh_text = std::to_string(tzhr);
              std::string timem_text = std::to_string(tzmin);
              std::string hour_a = (timeh_text.substr(0,1).c_str());
              std::string hour_b = (timeh_text.substr(1,1).c_str());
              std::string min_a = (timem_text.substr(0,1).c_str());
              std::string min_b = (timem_text.substr(1,1).c_str());
              if (tzmin < 10) {
                min_b = min_a;
                min_a = "0";
              }
              if (id(hour12_mode) == true) {
                if (tzhr > 12) {
                  timeh_text = std::to_string((tz1time_astm->tm_hour) - 12);
                  hour_a = (timeh_text.substr(0,1).c_str());
                  hour_b = (timeh_text.substr(1,1).c_str());
                }
                if ((tzhr < 22 && tzhr > 12) || (tzhr < 10)) {
                  hour_b = hour_a;
                  hour_a = " ";
                }
                if (tzhr == 0) {
                  hour_a = "1";
                  hour_b = "2";
                }
                if (tzhr > 11) {
                  if (id(segmentmap) == "GBPEDCAF") {
                    min_b.append("."); // the 303 can have a decimal after the 4th digit to indicate PM
                  }
                  if (id(segmentmap) == "PGFEDCBA") {
                    hour_b.append("."); // the Sinilink can have a decimal after the 2nd digit to indicate PM
                  }
                }
              } else {
                if (tzhr < 10) {
                  hour_b = hour_a;
                  hour_a = "0";
                }
              }
              if (((++blinking & 1) && (id(blink_option) == 1)) || (id(blink_option) == 2)) {
                if (id(segmentmap) == "GBPEDCAF") {
                  hour_b.append("."); // the 303 requires a period between the 2nd and 3rd digit to activate the colon
                }
                if (id(segmentmap) == "PGFEDCBA") {
                  min_a.append(".");
                  min_b.append("."); // the Sinilink requires periods after the 3rd and 4th digits to activate the colon
                }
              }
              it.print(0, hour_a.c_str());
              it.print(1, hour_b.c_str());
              it.print(2, min_a.c_str());
              it.print(3, min_b.c_str());
          }
        }
      } else {
        it.print("$waiting");
      }
      // This next bit handles the display_off stuff
      if (id(display_off)) {
        it.print(0, "    ");
        it.set_intensity(0);
      } else {
        it.set_intensity(id(brightness_level));
      }

interval:
  - interval: 1min # check if the time should be synced, and if so, do it
    then:
      - lambda: |-
          id(sync_time_count) += 1;
          if (id(sync_time_count) >= (id(sync_time) * 60)) {
            id(sync_time_count) = 0;
            if (id(wifi_id).is_connected()) {
              id(sync_the_time).execute();
            }
          }
  - interval: 1s # check if the wifi should be turned off, and if so, do it (or turn on if stop seek has been disabled) and blink led while seeking wifi
    then:
      - lambda: |-
          if (id(wifi_stop_seek) == true && !id(wifi_id).is_connected() && !id(wifi_id).is_disabled()){
            id(wifi_stop_seek_time_count) += 1;
            if (id(wifi_stop_seek_time_count) >= id(wifi_stop_seek_time) + 60) {
              id(wifi_stop_seek_time_count) = 0;
              id(wifi_id)->disable();
              id(display_ip).press();
            }
          }
          if (id(wifi_stop_seek) == false && id(wifi_id).is_disabled()) {
            id(wifi_stop_seek_time_count) = 0;
            id(wifi_id)->enable();
            id(display_ip).press();
          }
          if (!id(wifi_id).is_connected() && !id(wifi_id).is_disabled()) {
            id(seek_blink_led) += 1;
            if (id(wifi_stop_seek) == false) {
              if (id(seek_blink_led) % 1 == 0) {
                auto call = id(led1).toggle();
                call.perform();
              }
            } else {
              if (id(seek_blink_led) % 2 == 0) {
                auto call = id(led1).toggle();
                call.perform();
              }
            }
          }
          if (id(led1).current_values.is_on() && (id(wifi_id).is_connected() || id(wifi_id).is_disabled())) {
              auto call = id(led1).turn_off();
              call.perform();
          }
          if (id(my_time).now().is_valid() && !id(display_off)) {
            if ((id(display_off_no_wifi_time) != 0 && (!id(wifi_id).is_connected() || id(wifi_id).is_disabled())) || id(display_off_time) != 0) {
              id(display_off_time_count) = id(display_off_time_count) + 1;
            }
            if ((id(display_off_time) != 0 && id(display_off_time_count) >= (id(display_off_time) * 60)) || (id(display_off_no_wifi_time) != 0 && id(display_off_time_count) >= id(display_off_no_wifi_time))) {
              id(display_off_activate).execute();
            }
          }

globals:
  - id: brightness_level
    type: uint8_t
    restore_value: true
    initial_value: '1'
  - id: hour12_mode
    type: bool
    restore_value: true
    initial_value: 'false'
  - id: message
    type: std::string
    restore_value: false
    initial_value: ''
  - id: message_display_time
    type: uint8_t
    restore_value: false
    initial_value: '0'
  - id: message_clock_time
    type: uint8_t
    restore_value: false
    initial_value: '0'
  - id: message_alive_time
    type: uint8_t
    restore_value: false
    initial_value: '0'
  - id: message_display_time_count
    type: uint8_t
    restore_value: false
    initial_value: '0'
  - id: message_clock_time_count
    type: uint8_t
    restore_value: false
    initial_value: '0'
  - id: message_alive_time_count
    type: uint8_t
    restore_value: false
    initial_value: '0'
  - id: segmentmap
    type: std::string
    restore_value: false
    initial_value: ''
  - id: IPAddressA
    type: uint8_t
    restore_value: false
    initial_value: '0'
  - id: IPAddressB
    type: uint8_t
    restore_value: false
    initial_value: '0'
  - id: IPAddressC
    type: uint8_t
    restore_value: false
    initial_value: '0'
  - id: IPAddressD
    type: uint8_t
    restore_value: false
    initial_value: '0'
  - id: alarms_on
    type: bool
    restore_value: true
    initial_value: 'false'
  - id: blink_option
    type: uint8_t
    restore_value: true
    initial_value: '1'
  - id: date_display_mode
    type: bool
    restore_value: true
    initial_value: 'false'
  - id: date_display_mode_us
    type: bool
    restore_value: true
    initial_value: 'false'
  - id: time_display_time
    type: uint8_t
    restore_value: true
    initial_value: '8'
  - id: date_display_time
    type: uint8_t
    restore_value: true
    initial_value: '2'
  - id: time_display_count
    type: uint8_t
    restore_value: false
    initial_value: '0'
  - id: date_display_count
    type: uint8_t
    restore_value: false
    initial_value: '0'
  - id: sync_time
    type: uint8_t
    restore_value: false
    initial_value: '8'
  - id: sync_time_count
    type: uint8_t
    restore_value: false
    initial_value: '0'
# TZ Offset Variables
  - id: tzoffset
    type: int8_t
    restore_value: true
    initial_value: '0'
  - id: tzoffset_on
    type: bool
    restore_value: true
    initial_value: 'false'
# Wifi Stop Seek Variables
  - id: wifi_stop_seek
    type: bool
    restore_value: true
    initial_value: 'false'
  - id: wifi_stop_seek_time
    type: uint8_t
    restore_value: false
    initial_value: '120'
  - id: wifi_stop_seek_time_count
    type: uint8_t
    restore_value: false
    initial_value: '0'
  - id: seek_blink_led
    type: uint8_t
    restore_value: false
    initial_value: '0'
# Display Off Variables
  - id: display_off
    type: bool
    restore_value: false
    initial_value: 'false'
  - id: display_off_time
    type: uint8_t
    restore_value: true
    initial_value: '0'
  - id: display_off_time_count
    type: uint8_t
    restore_value: false
    initial_value: '0'
  - id: display_off_no_wifi_time
    type: uint8_t
    restore_value: true
    initial_value: '0'

button:
  - platform: restart
    id: restart_button
    name: "$friendly_name Restart"
    entity_category: diagnostic
  - platform: template
    id: display_ip
    name: "Display IP Address"
    internal: true
    on_press:
      - if:
          condition:
            not:
              wifi.connected:
          then:
            - lambda: |-
                if (id(wifi_id).is_disabled()) {
                  id(message) = ("Off");
                } else {
                  id(message) = ("noIP");
                }
                id(message_alive_time) = 3;
                id(message_display_time) = 3;
                id(message_clock_time) = 0;
          else:
            - lambda: |-
                int IPA, IPB, IPC, IPD;
                sscanf((id(wifi_ip).state.c_str()), "%d.%d.%d.%d", &IPA, &IPB, &IPC, &IPD);
                id(IPAddressA) = IPA;
                id(IPAddressB) = IPB;
                id(IPAddressC) = IPC;
                id(IPAddressD) = IPD;
                id(message) = "IP";
                id(message_alive_time) = 100;
                id(message_display_time) = 100;
                id(message_clock_time) = 0;
            - delay: 2s
            - lambda: 'id(message) = to_string(id(IPAddressA));'
            - delay: 2s
            - lambda: 'id(message) = to_string(id(IPAddressB));'
            - delay: 2s
            - lambda: 'id(message) = to_string(id(IPAddressC));'
            - delay: 2s
            - lambda: 'id(message) = to_string(id(IPAddressD));'
            - delay: 2s
            - lambda: |-
                id(message_alive_time) = 0;
                id(message_display_time) = 0;

switch:
  - platform: template
    name: "$friendly_name 12 Hour Mode"
    id: hour12_select
    restore_mode: RESTORE_DEFAULT_OFF
    lambda: 'return id(hour12_mode);'
    turn_on_action:
        - lambda: |-
            ESP_LOGD("main", "12 Hour Mode On");
            id(hour12_mode) = true;
    turn_off_action:
        - lambda: |-
            ESP_LOGD("main", "12 Hour Mode Off");
            id(hour12_mode) = false;
  - platform: template
    name: "$friendly_name Date Display US Mode (DDMM)"
    id: date_display_mode_us_select
    restore_mode: RESTORE_DEFAULT_OFF
    lambda: 'return id(date_display_mode_us);'
    turn_on_action:
        - lambda: |-
            ESP_LOGD("main", "Date Display US Mode On");
            id(date_display_mode_us) = true;
    turn_off_action:
        - lambda: |-
            ESP_LOGD("main", "Date Display US Mode Off");
            id(date_display_mode_us) = false;
  - platform: template
    name: "$friendly_name Time Zone Offset On"
    id: tzoffset_on_select
    restore_mode: RESTORE_DEFAULT_OFF
    lambda: 'return id(tzoffset_on);'
    turn_on_action:
        - lambda: |-
            ESP_LOGD("main", "Time Zone Offset On");
            id(tzoffset_on) = true;
    turn_off_action:
        - lambda: |-
            ESP_LOGD("main", "Time Zone Offset Off");
            id(tzoffset_on) = false;
  - platform: template
    name: "$friendly_name Date Display Mode"
    id: date_mode_select
    restore_mode: RESTORE_DEFAULT_OFF
    lambda: 'return id(date_display_mode);'
    turn_on_action:
        - logger.log: "Date Display Mode On"
        - lambda: |-
            id(date_display_mode) = true;
            id(message) = ("dton");
            id(message_alive_time) = 1;
            id(message_display_time) = 1;
            id(message_clock_time) = 0;
    turn_off_action:
        - logger.log: "Date Display Mode Off"
        - lambda: |-
            id(date_display_mode) = false;
            id(message) = ("doff");
            id(message_alive_time) = 1;
            id(message_display_time) = 1;
            id(message_clock_time) = 0;
  - platform: template
    name: "$friendly_name Wifi Stop Seek"
    id: wifi_stop_seek_select
    restore_mode: RESTORE_DEFAULT_OFF
    lambda: 'return id(wifi_stop_seek);'
    turn_on_action:
        - delay: 1s
        - logger.log: "Wifi Stop Seek On"
        - lambda: |-
            id(wifi_stop_seek) = true;
            id(message) = ("stop");
            id(message_alive_time) = 1;
            id(message_display_time) = 1;
            id(message_clock_time) = 0;
    turn_off_action:
        - delay: 1s
        - logger.log: "Wifi Stop Seek Off"
        - lambda: |-
            id(wifi_stop_seek) = false;
            id(message) = ("seeH");
            id(message_alive_time) = 1;
            id(message_display_time) = 1;
            id(message_clock_time) = 0;

select:
  - platform: template
    name: "$friendly_name Colon Blink (0=Off / 1=On / 2=Always On)"
    id: blink_option_select
    restore_value: true
    optimistic: true
    options:
      - '0'
      - '1'
      - '2'
    initial_option: '1'
    on_value:
      then:
        - lambda: |-
            id(blink_option) = atoi(x.c_str());
            ESP_LOGD("main", "Colon Blink: %d", id(blink_option));

number:
  - platform: template
    name: "$friendly_name Brightness"
    id: brightness_select
    restore_value: true
    optimistic: true
    step: 1
    min_value: 0
    max_value: 8
    initial_value: 1
    mode: slider
    set_action:
      then:
        - lambda: |-
            id(brightness_level) = x;
            ESP_LOGD("main", "Brightness: %d", id(brightness_level));
  - platform: template
    name: "$friendly_name Time Display Time"
    id: time_display_time_select
    restore_value: true
    optimistic: true
    step: 1
    min_value: 1
    max_value: 60
    initial_value: 8
    mode: box
    unit_of_measurement: seconds
    set_action:
      then:
        - lambda: |-
            id(time_display_time) = x;
            ESP_LOGD("main", "Time Display Time: %d seconds", id(time_display_time));
  - platform: template
    name: "$friendly_name Date Display Time"
    id: date_display_time_select
    restore_value: true
    optimistic: true
    step: 1
    min_value: 1
    max_value: 60
    initial_value: 2
    mode: box
    unit_of_measurement: seconds
    set_action:
      then:
        - lambda: |-
            id(date_display_time) = x;
            ESP_LOGD("main", "Date Display Time: %d seconds", id(date_display_time));
  - platform: template
    name: "$friendly_name Time Zone Offset"
    id: tzoffset_select
    restore_value: true
    optimistic: true
    step: 0.25
    min_value: -26
    max_value: 26
    initial_value: 0
    mode: box
    unit_of_measurement: hours
    set_action:
      then:
        - lambda: |-
            id(tzoffset) = x;
            ESP_LOGD("main", "Time Zone Offset: %.2f", id(tzoffset));
  - platform: template
    name: "$friendly_name Display Off Time (minutes) (0 Disable)"
    id: display_off_time_select
    restore_value: true
    optimistic: true
    step: 5
    min_value: 0
    max_value: 60
    mode: box
    set_action:
      then:
        - lambda: |-
            id(display_off_time) = x;
            ESP_LOGD("main", "Display Off Time: %d minutes", id(display_off_time));
        - script.execute: display_off_deactivate
  - platform: template
    name: "$friendly_name Display Off When No Wifi Time (seconds) (0 Disable)"
    id: display_off_no_wifi_time_select
    restore_value: true
    optimistic: true
    step: 5
    min_value: 0
    max_value: 180
    mode: box
    set_action:
      then:
        - lambda: |-
            id(display_off_no_wifi_time) = x;
            ESP_LOGD("main", "Display Off No Wifi Time: %d seconds", id(display_off_no_wifi_time));
        - script.execute: display_off_deactivate
