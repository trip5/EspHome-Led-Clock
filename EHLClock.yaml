substitutions:
  name:  xy-clock-white
  friendly_name: XY-Clock-White
  waiting: "ehLC" # shows when waiting for time
  time_zone: "Asia/Seoul" # This will be your 'home' Timezone. Check https://en.wikipedia.org/wiki/List_of_tz_database_time_zones
# SCL & SDA are same for Sinilink and 303 Clocks
  scl_pin: GPIO12
  sda_pin: GPIO13

# Mappings are the order of the LED segments. Using the wrong mapping will result in a garbled display!
  segment_mapping: PGFEDCBA # Specific to the Sinilink XY-Clock
#  segment_mapping: GBPEDCAF # Specific to 303WIFILC01
#  segment_mapping: PABCDEFG # normal TM1650 (support not really included yet)

# Sinilink Clock uses these pins for buttons
  down_button_pin: GPIO9
  up_button_pin: GPIO10 
  set_button_pin: GPIO16
# 303 Clock uses these pins for buttons
#  down_button_pin: GPIO15
#  up_button_pin: GPIO4
#  set_button_pin: GPIO0

# Sinilink and 303 both have a Red LED (Same GPIO)
  red_led_pin: GPIO2

# Sinilink Clock has these additional GPIOs / delete for 303
  blue_led_pin: GPIO0
  buzzer_pin: GPIO5
  key_pin: GPIO14 #	Contact 'KEY'

esphome:
  name: $name
  comment: "EHLClock from Trip5"
  project:
    name: "Trip5.EspHomeLedClock"
    version: "2023.10.22"
  on_boot:
    then:
      - globals.set:
          id: segmentmap
          value: !lambda 'return "$segment_mapping";'
# The Sinilink uses a DS1307 RTC (supported by ESPHome)
      - ds1307.read_time:
# The 303 uses a DS1302 RTC (will also require an external component)
#      - ds1302.read_time:

esp8266:
  board: esp8285
  restore_from_flash: True
  
wifi:
  networks:
  - ssid: !secret wifi_ssid
    password: !secret wifi_password
  ap:
    ssid: "$name Hotspot"
    password: !secret ap_password

external_components:
# Use Trip5's fork of Buzzer13's TM1650 ESPHome Component
  - source:
      type: git
      url: https://github.com/trip5/esphome-tm1650
      ref: main
    refresh: 60s
    components: [ tm1650 ]
# Prefer a local source (only use one source)
#  - source:
#      type: local
#      path: my-components/EHCL-Clock # e.g. /config/esphome/components
#    components: [ tm1650 ]

# The 303 Clock has a DS1302 RTC (uncomment this section to use it)
#  - source:
#      type: git
#      url: https://github.com/trip5/esphome-ds1302
#      ref: main
#    refresh: 60s
#    components: [ ds1302 ]

time:
  - platform: sntp
# If you would rather use Home Assistant as a time source, delete the above line and uncomment the next line (but sntp means you can take your clock anywhere)
#  - platform: homeassistant
    timezone: "$time_zone"
    update_interval: 8h
#    id: my_time # one platform must contain id: my_time (so if you don't have an RTC or delete all references to the RTC, uncomment this line)
    on_time_sync:
      then:
# The Sinilink Clock uses a DS1307 RTC
        ds1307.write_time:
# The 303 Clock uses a DS1302 RTC (uncomment this and delete the other if needed)
#        ds1302.write_time:

# The Sinilink Clock uses a DS1307 RTC
  - platform: ds1307
    id: my_time
    timezone: "$time_zone"
    update_interval: never

# The 303 Clock has a DS1302 RTC (uncomment this section to use it), use Trip5's fork of Trombik's DS1302 ESPHome Component
#  - platform: ds1302
#    id: my_time
#    cs_pin: GPIO5
#    dio_pin: GPIO14
#    clk_pin: GPIO16
#    update_interval: never
#    timezone: "$time_zone"

# Check if alarms need to be played (needs to be under whichever Platform has the ID, preferably the RTC or SNTP?)
# The next section is only for the Sinilink Clock. If using the 303 Clock or another with no piezo speaker, delete the entire section
# If you want to add/subtract alarms or tunes, take a look at the nested 'if' states - copy/paste/edit as needed
    on_time:
      - seconds: 0
        minutes: /1 # repeat every minute
        then:
        - lambda: |-
            int offset = 0;
            if (id(tzoffset_on) != 0) {
              offset = (int)(60*60*(id(tzoffset)));
            }
            std::time_t tz1time = (id(my_time).now().timestamp+offset);
            std::tm *tz1time_astm = localtime(&tz1time);
            int tzhr = tz1time_astm->tm_hour;
            int tzmin = tz1time_astm->tm_min;
            ESP_LOGD("main", "Hour: %d", tzhr);
            ESP_LOGD("main", "Minute: %d", tzmin);
            if (id(alarms_on) == 1 && id(alarm1_hour) == tzhr && id(alarm1_min) == tzmin) {
              // need to put all alarm tunes that exist nested here
              if (id(alarm1_tune) == 1) { id(tune1).press(); };
              if (id(alarm1_tune) == 2) { id(tune2).press(); };
              if (id(alarm1_tune) == 3) { id(tune3).press(); };
            };
            // if you add an alarm3, duplicate and edit the entire next 'if'
            if (id(alarms_on) == 1 && id(alarm2_hour) == tzhr && id(alarm2_min) == tzmin) {
              // need to put all alarm tunes that exist nested here
              if (id(alarm2_tune) == 1) { id(tune1).press(); };
              if (id(alarm2_tune) == 2) { id(tune2).press(); };
              if (id(alarm2_tune) == 3) { id(tune3).press(); };
            };

# The next section interacts with Home Assistant - it's possible the device doesn't need Home Assistant, in which case delete this whole section
api:
  services:
# The next section is only for the Sinilink Clock. If using the 303 Clock or another with no piezo speaker, delete the next 6 lines
    - service: tune
      variables:
        tune: string
      then:
        - rtttl.play:
            rtttl: !lambda 'return tune;'
# This next section creates the Home Assistant services to allow messages to be displayed
    - service: message
      variables:
        message: string
        message_alive_time: int
        message_display_time: int
        message_clock_time: int
      then:
        - globals.set:
            id: message
            value: !lambda 'return message;'
        - globals.set:
            id: message_alive_time
            value: !lambda 'return message_alive_time;'
        - globals.set:
            id: message_display_time
            value: !lambda 'return message_display_time;'
        - globals.set:
            id: message_clock_time
            value: !lambda 'return message_clock_time;'
        - globals.set:
            id: message_clock_time_count
            value: !lambda 'return message_clock_time;'
        - globals.set:
            id: message_alive_time_count
            value: '0'
        - logger.log:
            format: "Message: %s"
            args: [ 'message.c_str()' ]
        - logger.log:
            format: "Alive Time: %i / Display Time: %i / Clock Time: %i"
            args: [ 'message_alive_time', 'message_display_time' , 'message_clock_time' ]

mdns:
  disabled: false

logger:

ota:
  password: !secret ota_password

web_server:
  port: 80
  ota: true
  include_internal: true

captive_portal:

text_sensor:
  - platform: version
    name: "ESPHome Version"
    hide_timestamp: true
    internal: true
  - platform: wifi_info
    ip_address:
      id: wifi_ip
      name: "$friendly_name IP Address"
    ssid:
      id: wifi_ssid
      name: "$friendly_name SSID"

status_led:
  pin:
    number: $red_led_pin
    inverted: true

preferences:
  flash_write_interval: 15s # 0 does immediate write to memory with no mem buffer (not recommended) (only saves when persistent variables have changed)

i2c:
  sda: $sda_pin
  scl: $scl_pin
  scan: true
  id: i2cbus
  
# Check this section carefully!
# Also, some info how to handle multi_click options: https://community.home-assistant.io/t/esphome-button-held-double-press/136083/10
binary_sensor:
  - platform: status
    name: "$friendly_name Status"
  - platform: gpio
    pin:
      number: $up_button_pin
      inverted: true # Sinilink true / 303 true
      mode: INPUT_PULLUP
    name: "$friendly_name Up button"
    filters:
      - delayed_on: 10ms
      - delayed_off: 10ms
    on_multi_click:
      #Click UP will increase brightness
      - timing:
          - ON for at most 0.5s
          - OFF for at least 0.5s
        then:
          - number.increment: brightness_select
      #Hold UP will toggle enable or disable alarms / delete this part if Alarms don't exist anywhere else (the 303 Clock)
      - timing:
          - ON for at least 1s
        then:
          - switch.toggle: alarms_select
  - platform: gpio
    pin:
      number: $down_button_pin
      inverted: true # Sinilink true / 303 false
      mode: INPUT_PULLUP
    name: "$friendly_name Down button"
    filters:
      - delayed_on: 10ms
      - delayed_off: 10ms
    on_multi_click:
      #Click DOWN will decrease brightness
      - timing:
          - ON for at most 0.5s
          - OFF for at least 0.5s
        then:
          - number.decrement: brightness_select
      #Hold DOWN will select enable or disable time zone offset
      - timing:
          - ON for at least 1s
        then:
          - switch.toggle: tzoffset_on_select
  - platform: gpio
    pin: 
      number: $set_button_pin
      inverted: true # Sinilink true / 303 true
    name: "$friendly_name Set button"
    filters:
      - delayed_on: 10ms
      - delayed_off: 10ms
    on_multi_click:
      #Click SET will toggle 12-hour mode
      - timing:
          - ON for at most 0.5s
          - OFF for at least 0.5s
        then:
          - switch.toggle: hour12_select
      #Hold SET will show the IP Address
      - timing:
          - ON for at least 1s
        then:
          - button.press: display_ip

# The next section is only for the Sinilink Clock. If using the 303 Clock or another with no piezo speaker, delete the next 4 lines
output:
  - platform: esp8266_pwm
    pin: $buzzer_pin
    id: rtttl_out

# The next section is only for the Sinilink Clock. If using the 303 Clock or another with no piezo speaker, delete the next 2 lines
rtttl:
  output: rtttl_out

# This section contains a lot of lambda code... if using the Sinilink or 303, you shouldn't have to edit this at all
# If using something else, you may need to edit the segmentmap sections (conveniently 'if' sections), depending on how the decimals/colons are handled
# If that's true, get back to me on github by opening an issue and help contribute to other displays this YAML can handle!
display:
  - platform: tm1650
    id: disp_tm1650
    i2c_id: i2cbus
    length: 4
    segment_map: $segment_mapping
    update_interval: 1s
    lambda: |-
      // Display the message if all conditions are met
      if (id(my_time).now().is_valid()) {
        if ((id(message_alive_time) != 0) && (id(message_clock_time_count) >= id(message_clock_time))) {
          id(message_display_time_count) += 1;
          id(message_alive_time_count) += 1;
          auto message_text = id(message);
          it.print(0, message_text.c_str());
          if (id(message_display_time_count) >= id(message_display_time)) {
            id(message_display_time_count) = 0;
            id(message_clock_time_count) = 0;
            if (id(message_alive_time_count) >= id(message_alive_time)) {
              id(message_alive_time_count) = 0;
              id(message_alive_time) = 0;
              ESP_LOGD("main", "Message Alive Time finished.");
            }
          }
        } else {
          if ((id(message_alive_time) != 0) && (id(message_clock_time) != 0)) {
            id(message_clock_time_count) += 1;
            id(message_alive_time_count) += 1;
          }
          static int blinking = 0;
          int offset = 0;
          if (id(tzoffset_on) != 0) {
            offset = (int)(60*60*(id(tzoffset)));
          }
          std::time_t tz1time = (id(my_time).now().timestamp+offset);
          std::tm *tz1time_astm = localtime(&tz1time);
          // check if the date should be displayed
          if ((id(date_display_time_count) >= (id(date_display_interval))) && (id(date_display_mode) != 0)) {
            id(date_display_count) += 1;
            // display date
            int tzmon = (tz1time_astm->tm_mon) + 1;
            int tzmday = tz1time_astm->tm_mday;
            std::string timemon_text = std::to_string(tzmon);
            std::string timemday_text = std::to_string(tzmday);
            std::string mon_a = (timemon_text.substr(0,1).c_str());
            std::string mon_b = (timemon_text.substr(1,1).c_str());
            std::string mday_a = (timemday_text.substr(0,1).c_str());
            std::string mday_b = (timemday_text.substr(1,1).c_str());
            if (tzmon < 10) {
              mon_b = mon_a;
              mon_a = "0";
            }
            if (tzmday < 10) {
              mday_b = mday_a;
              mday_a = "0";
            }
            if (id(date_display_mode_us) != 0) {
              it.print(0, mday_a.c_str());
              it.print(1, mday_b.c_str());
              it.print(2, mon_a.c_str());
              it.print(3, mon_b.c_str());
            } else {
              it.print(0, mon_a.c_str());
              it.print(1, mon_b.c_str());
              it.print(2, mday_a.c_str());
              it.print(3, mday_b.c_str());
            }
            if (id(date_display_count) >= id(date_display_time)) {
              id(date_display_time_count) = 0;
            }
          } else {
            id(date_display_count) = 0;
            // display time
            if (id(date_display_mode) != 0) {
              id(date_display_time_count) += 1;
            }
            int tzhr = tz1time_astm->tm_hour;
            int tzmin = tz1time_astm->tm_min;
            std::string timeh_text = std::to_string(tzhr);
            std::string timem_text = std::to_string(tzmin);
            std::string hour_a = (timeh_text.substr(0,1).c_str());
            std::string hour_b = (timeh_text.substr(1,1).c_str());
            std::string min_a = (timem_text.substr(0,1).c_str());
            std::string min_b = (timem_text.substr(1,1).c_str());
            if (tzmin < 10) {
              min_b = min_a;
              min_a = "0";
            }
            if (id(hour12_mode) == 1) {
              if (tzhr > 12) {
                timeh_text = std::to_string((tz1time_astm->tm_hour) - 12);
                hour_a = (timeh_text.substr(0,1).c_str());
                hour_b = (timeh_text.substr(1,1).c_str());
              }
              if ((tzhr < 22 && tzhr > 12) || (tzhr < 10)) {
                hour_b = hour_a;
                hour_a = " ";
              }
              if (tzhr == 0) {
                hour_a = "1";
                hour_b = "2";
              }
              if (tzhr > 11) {
                if (id(segmentmap) == "GBPEDCAF") {
                  min_b.append("."); // the 303 can have a decimal after the 4th digit to indicate PM
                }
                if (id(segmentmap) == "PGFEDCBA") {
                  hour_b.append("."); // the Sinilink can have a decimal after the 2nd digit to indicate PM
                }
              }
            } else {
              if (tzhr < 10) {
                hour_b = hour_a;
                hour_a = "0";
              }
            }
            if (((++blinking & 1) && (id(blink_option) == 1)) || (id(blink_option) == 2)) {
              if (id(segmentmap) == "GBPEDCAF") {
                hour_b.append("."); // the 303 requires a period between the 2nd and 3rd digit to activate the colon
              }
              if (id(segmentmap) == "PGFEDCBA") {
                min_a.append(".");
                min_b.append("."); // the Sinilink requires periods after the 3rd and 4th digits to activate the colon
              }
            }
            it.print(0, hour_a.c_str());
            it.print(1, hour_b.c_str());
            it.print(2, min_a.c_str());
            it.print(3, min_b.c_str());
          }
        }
      } else {
        it.print("$waiting");
      }
      id(disp_tm1650)->set_intensity(id(brightness_level));

# Example configuration entry
globals:
   - id: brightness_level
     type: int
     restore_value: true
     initial_value: '1'
   - id: hour12_mode
     type: bool
     restore_value: true
     initial_value: 'false'
   - id: tzoffset
     type: float
     restore_value: true
     initial_value: '0'
   - id: tzoffset_on
     type: bool
     restore_value: true
     initial_value: 'false'
   - id: message
     type: std::string
     restore_value: false
     initial_value: ''
   - id: message_display_time
     type: int
     restore_value: false
     initial_value: '0'
   - id: message_clock_time
     type: int
     restore_value: false
     initial_value: '0'
   - id: message_alive_time
     type: int
     restore_value: false
     initial_value: '0'
   - id: message_display_time_count
     type: int
     restore_value: false
     initial_value: '0'
   - id: message_clock_time_count
     type: int
     restore_value: false
     initial_value: '0'
   - id: message_alive_time_count
     type: int
     restore_value: false
     initial_value: '0'
   - id: segmentmap
     type: std::string
     restore_value: false
     initial_value: ''
   - id: IPAddressA
     type: int
     restore_value: false
     initial_value: '0'
   - id: IPAddressB
     type: int
     restore_value: false
     initial_value: '0'
   - id: IPAddressC
     type: int
     restore_value: false
     initial_value: '0'
   - id: IPAddressD
     type: int
     restore_value: false
     initial_value: '0'
   - id: alarms_on
     type: bool
     restore_value: true
     initial_value: 'false'
   - id: blink_option
     type: int
     restore_value: true
     initial_value: '1'
   - id: date_display_mode
     type: bool
     restore_value: true
     initial_value: 'false'
   - id: date_display_mode_us
     type: bool
     restore_value: true
     initial_value: 'false'
   - id: date_display_interval
     type: int
     restore_value: true
     initial_value: '8'
   - id: date_display_time
     type: int
     restore_value: true
     initial_value: '2'
   - id: date_display_time_count
     type: int
     restore_value: false
     initial_value: '0'
   - id: date_display_count
     type: int
     restore_value: false
     initial_value: '0'

# Alarms Variables (edit as needed, each alarm requires 3 variables) / the next section is only for the Sinilink Clock. If using the 303 Clock or another with no piezo speaker, delete the next 25 lines
   - id: alarm1_tune
     type: int
     restore_value: true
     initial_value: '0'
   - id: alarm1_hour
     type: int
     restore_value: true
     initial_value: '0'
   - id: alarm1_min
     type: int
     restore_value: true
     initial_value: '0'
# Alarm 2 variables (if adding more, copy and paste the next 12 lines, and edit it properly... (ie. alarm2_tune -> alarm3_tune, alarm2_hour -> alarm3_hour, alarm2_min -> alarm3_min, etc.)
   - id: alarm2_tune
     type: int
     restore_value: true
     initial_value: '0'
   - id: alarm2_hour
     type: int
     restore_value: true
     initial_value: '0'
   - id: alarm2_min
     type: int
     restore_value: true
     initial_value: '0'

button:
  - platform: restart
    id: "Restart"
    internal: true
  - platform: template
    id: display_ip
    name: "Display IP Address"
    internal: true
    on_press:
      - lambda: |-
          // int IPA[3], IPB[3], IPC[3], IPD[3];
          int IPA, IPB, IPC, IPD;
          sscanf((id(wifi_ip).state.c_str()), "%d.%d.%d.%d", &IPA, &IPB, &IPC, &IPD);
          id(IPAddressA) = IPA;
          id(IPAddressB) = IPB;
          id(IPAddressC) = IPC;
          id(IPAddressD) = IPD;
          id(message_alive_time) = 2;
          id(message_display_time) = 2;
          id(message_clock_time) = 0;
          id(message) = "IP";
      - delay: 2s
      - lambda: |-
          id(message_alive_time) = 2;
          id(message_display_time) = 2;
          id(message) = to_string(id(IPAddressA));
      - delay: 2s
      - lambda: |-
          id(message_alive_time) = 2;
          id(message_display_time) = 2;
          id(message) = to_string(id(IPAddressB));
      - delay: 2s
      - lambda: |-
          id(message_alive_time) = 2;
          id(message_display_time) = 2;
          id(message) = to_string(id(IPAddressC));
      - delay: 2s
      - lambda: |-
          id(message_alive_time) = 2;
          id(message_display_time) = 2;
          id(message) = to_string(id(IPAddressD));
# Tune Buttons (edit as needed, verify the selector below matches the number available) / the next section is only for the Sinilink Clock. If using the 303 Clock or another with no piezo speaker, delete the next 18 lines
  - platform: template
    id: tune1
    name: "Tune 1: Siren"
    internal: true
    on_press:
     - rtttl.play: 'siren:d=8,o=5,b=100:d,e,d,e,d,e,d,e'
  - platform: template
    id: tune2
    name: "Tune 2: Scale Up"
    internal: true
    on_press:
     - rtttl.play: 'scale_up:d=32,o=5,b=100:c,c#,d#,e,f#,g#,a#,b'
  - platform: template
    id: tune3
    name: "Tune 3: Death"
    internal: true
    on_press:
      - rtttl.play: "death:d=4,o=5,b=100:c.,c,8c,c.,d#,8d,d,8c,c,8c,2c."

switch:
  - platform: template
    name: "$friendly_name 12 Hour Mode"
    id: hour12_select
    restore_mode: RESTORE_DEFAULT_OFF
    lambda: |-
      if (id(hour12_mode)) {
        return true;
      } else {
        return false;
      }
    turn_on_action:
        lambda: |-
          id(hour12_mode) = true;
    turn_off_action:
        lambda: |-
          id(hour12_mode) = false;
  - platform: template
    name: "$friendly_name Date Display US Mode (DDMM)"
    id: date_display_mode_us_select
    restore_mode: RESTORE_DEFAULT_OFF
    lambda: |-
      if (id(date_display_mode_us)) {
        return true;
      } else {
        return false;
      }
    turn_on_action:
        lambda: |-
          id(date_display_mode_us) = true;
    turn_off_action:
        lambda: |-
          id(date_display_mode_us) = false;
  - platform: template
    name: "$friendly_name Home Time Zone Offset On"
    id: tzoffset_on_select
    restore_mode: RESTORE_DEFAULT_OFF
    lambda: |-
      if (id(tzoffset_on)) {
        return true;
      } else {
        return false;
      }
    turn_on_action:
        lambda: |-
          id(tzoffset_on) = true;
    turn_off_action:
        lambda: |-
          id(tzoffset_on) = false;
  - platform: template
    name: "$friendly_name Date Display Mode"
    id: date_mode_select
    restore_mode: RESTORE_DEFAULT_OFF
    lambda: |-
      if (id(date_display_mode)) {
        return true;
      } else {
        return false;
      }
    turn_on_action:
        lambda: |-
          id(date_display_mode) = true;
    turn_off_action:
        lambda: |-
          id(date_display_mode) = false;
# Alarms On/Off Selector: in theory, you could edit this and duplicate it to turn individual alarms on and off (you'd have to edit the on_time section and add global variables)
# The next section is only for the Sinilink Clock. If using the 303 Clock or another with no piezo speaker, delete the next 22 lines
  - platform: template
    name: "$friendly_name Alarms On"
    id: alarms_select
    restore_mode: RESTORE_DEFAULT_OFF
    lambda: |-
      if (id(alarms_on)) {
        return true;
      } else {
        return false;
      }
    turn_on_action:
        lambda: |-
          id(alarms_on) = true;
          id(message_alive_time) = 2;
          id(message_display_time) = 2;
          id(message) = ("ALon");
    turn_off_action:
        lambda: |-
          id(alarms_on) = false;
          id(message_alive_time) = 2;
          id(message_display_time) = 2;
          id(message) = ("Aoff");

select:
  - platform: template
    name: "$friendly_name Colon Blink (0=Off / 1=On / 2=Always On)"
    id: blink_option_select
    restore_value: true
    optimistic: true
    options:
      - '0'
      - '1'
      - '2'
    initial_option: '1'
    on_value:
      then:
        lambda: |-
          id(blink_option) = atoi(x.substr(0,2).c_str());
          ESP_LOGD("main", "Colon Blink: %d", id(blink_option));

number:
  - platform: template
    name: "$friendly_name Brightness"
    id: brightness_select
    restore_value: true
    optimistic: true
    step: 1
    min_value: 0
    max_value: 8
    initial_value: 1
    mode: slider
    set_action:
      then:
        lambda: |-
          id(brightness_level) = x;
          ESP_LOGD("main", "Brightness: %d", id(brightness_level));
  - platform: template
    name: "$friendly_name Date Display Interval"
    id: date_display_interval_select
    restore_value: true
    optimistic: true
    step: 1
    min_value: 1
    max_value: 60
    initial_value: 8
    mode: box
    unit_of_measurement: seconds
    set_action:
      then:
        lambda: |-
          id(date_display_interval) = x;
          ESP_LOGD("main", "Date Display Interval: %d", id(date_display_interval));
  - platform: template
    name: "$friendly_name Date Display Time"
    id: date_display_time_select
    restore_value: true
    optimistic: true
    step: 1
    min_value: 1
    max_value: 60
    initial_value: 2
    mode: box
    unit_of_measurement: seconds
    set_action:
      then:
        lambda: |-
          id(date_display_time) = x;
          ESP_LOGD("main", "Date Display Time: %d", id(date_display_time));
  - platform: template
    name: "$friendly_name Home Time Zone Offset"
    id: tzoffset_select
    restore_value: true
    optimistic: true
    step: 0.25
    min_value: -26
    max_value: 26
    initial_value: 0
    mode: box
    unit_of_measurement: hours
    set_action:
      then:
        lambda: |-
          id(tzoffset) = x;
          ESP_LOGD("main", "Time Zone Offset: %.2f", id(tzoffset));

# The next section is only for the Sinilink Clock. If using the 303 Clock or another with no piezo speaker, delete from here to the end.
# Alarms UI Selector (each alarm requires tune/hour/min selectors)
# Alarm 1 UI Selector Begins
  - platform: template
    name: "$friendly_name Alarm 1 Tune (0=Off)"
    restore_value: true
    optimistic: true
    step: 1
    min_value: 0
    max_value: 3 # set this to how many alarms you have available
    initial_value: 0
    mode: box
    set_action:
      then:
        lambda: |-
          id(alarm1_tune) = x;
          ESP_LOGD("main", "Alarm 1 Tune: %d", id(alarm1_tune));
  - platform: template
    name: "$friendly_name Alarm 1 Hour"
    restore_value: true
    optimistic: true
    step: 1
    min_value: 0
    max_value: 23
    initial_value: 0
    mode: box
    unit_of_measurement: hours
    set_action:
      then:
        lambda: |-
          id(alarm1_hour) = x;
          ESP_LOGD("main", "Alarm 1 Hour: %d", id(alarm1_hour));
  - platform: template
    name: "$friendly_name Alarm 1 Minutes"
    restore_value: true
    optimistic: true
    step: 1
    min_value: 0
    max_value: 59
    initial_value: 0
    mode: box
    unit_of_measurement: minutes
    set_action:
      then:
        lambda: |-
          id(alarm1_min) = x;
          ESP_LOGD("main", "Alarm 1 Minutes: %d", id(alarm1_min));

# If you require more alarms, copy from the next line to the end, paste, and edit all variables/names... (ie. Alarm 2 -> Alarm 3, alarm2_tune -> alarm3_tune, etc.)
# WARNING: keep in mind that the ESP8266 has limited flash memory... it may not work after a certain number (up to 3 have been tested)
# Alarm 2 UI Selector Begins
  - platform: template
    name: "$friendly_name Alarm 2 Tune (0=Off)"
    restore_value: true
    optimistic: true
    step: 1
    min_value: 0
    max_value: 3 # set this to how many alarms you have available
    initial_value: 0
    mode: box
    set_action:
      then:
        lambda: |-
          id(alarm2_tune) = x;
          ESP_LOGD("main", "Alarm 2 Tune: %d", id(alarm2_tune));
  - platform: template
    name: "$friendly_name Alarm 2 Hour"
    restore_value: true
    optimistic: true
    step: 1
    min_value: 0
    max_value: 23
    initial_value: 0
    mode: box
    unit_of_measurement: hours
    set_action:
      then:
        lambda: |-
          id(alarm2_hour) = x;
          ESP_LOGD("main", "Alarm 2 Hour: %d", id(alarm2_hour));
  - platform: template
    name: "$friendly_name Alarm 2 Minutes"
    restore_value: true
    optimistic: true
    step: 1
    min_value: 0
    max_value: 59
    initial_value: 0
    mode: box
    unit_of_measurement: minutes
    set_action:
      then:
        lambda: |-
          id(alarm2_min) = x;
          ESP_LOGD("main", "Alarm 2 Minutes: %d", id(alarm2_min));