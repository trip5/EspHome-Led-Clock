substitutions:
  name: 303-clock
  friendly_name: 303-Clock
  comment: "EHLClock from Trip5"
  project_version: "2023.11.16"
  project_name: Trip5.EspHomeLedClock
  waiting: "ehLC" # shows when waiting for time
  # Time zone can be Olsen type ("Asia/Seoul") # Check https://en.wikipedia.org/wiki/List_of_tz_database_time_zones
  # Or it can be POSIX format: ("PST8PDT,M3.2.0/2:00:00,M11.1.0/2:00:00") - most can be viewed here: https://gist.github.com/alwynallan/24d96091655391107939
  # Read more about how to customize a POSIX format here: https://developer.ibm.com/articles/au-aix-posix/
  time_zone: "KST-9"

# SCL & SDA are same for Sinilink and 303 Clocks
  scl_pin: GPIO12
  sda_pin: GPIO13
  segment_mapping: GBPEDCAF # Specific to 303WIFILC01
# 303 Clock uses these pins for buttons
  down_button_pin: GPIO15
  up_button_pin: GPIO4
  set_button_pin: GPIO0
# The 303 only has 1 LED (uncomment next line and delete the above 4 lines)
  status_led_pin: GPIO2

esphome:
  name: $name
  comment: "$comment"
  project:
    name: "$project_name"
    version: "$project_version"
  min_version: 2023.11.0
  on_boot:
    then:
      - globals.set:
          id: segmentmap
          value: !lambda 'return "$segment_mapping";'
# The 303 uses a DS1302 RTC (will also require an external component)
      - ds1302.read_time:

esp8266:
  board: esp8285
  restore_from_flash: True
  
wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  reboot_timeout: 0s # reboot if no wifi (must be disabled for wifi to be turned off)
  enable_on_boot: True
  id: wifi_id
  ap:
    ssid: $name
    password: !secret ap_password
    ap_timeout: 10s # this has to be short, especially if using Stop Seek Wifi
  on_connect:
    - logger.log: "Wifi connected"
    - light.turn_off: led1
    - delay: 1s
    - button.press: display_ip
    - lambda: |-
        id(wifi_stop_seek_time_count) = 0;
        id(my_time)->update();
  on_disconnect:
    - if:
        condition:
          lambda: |-
            return (id(wifi_stop_seek) ==  1);
        then:
          - logger.log: "Wifi disconnected - will be disabled soon (stop seek is on)..."
        else:
          - logger.log: "Wifi disconnected"
    - delay: 1s
    - button.press: display_ip

external_components:
# Use Trip5's fork of Buzzer13's TM1650 ESPHome Component
  - source:
      type: git
      url: https://github.com/trip5/esphome-tm1650
      ref: main
    refresh: 60s
    components: [ tm1650 ]

# The 303 Clock has a DS1302 RTC (uncomment this section to use it), use Trip5's fork of Trombik's DS1302 ESPHome Component
  - source:
      type: git
      url: https://github.com/trip5/esphome-ds1302
      ref: main
    refresh: 60s
    components: [ ds1302 ]

time:
  - platform: sntp
    id: my_time
# If you would rather use Home Assistant as a time source, delete the above line and uncomment the next line (but sntp means you can take your clock anywhere)
#  - platform: homeassistant
    timezone: "$time_zone"
    update_interval: 24h # This seems like the longest safe amount of time - actual configured update interval happens under Display
    on_time_sync:
      then:
# The 303 Clock uses a DS1302 RTC (uncomment this and delete the other if needed)
        ds1302.write_time:
# The 303 Clock uses a DS1302 RTC (uncomment this section and delete the above DS1307 section if needed)
  - platform: ds1302
    cs_pin: GPIO5
    dio_pin: GPIO14
    clk_pin: GPIO16
    update_interval: never
    timezone: "$time_zone"

# The next section interacts with Home Assistant - it's possible the device doesn't need Home Assistant, in which case delete this whole section
api:
  reboot_timeout: 0s # Must be disabled to allow the Wifi enable/disable to function
  services:
# This next section creates the Home Assistant services to allow messages to be displayed
    - service: message
      variables:
        message: string
        message_alive_time: int
        message_display_time: int
        message_clock_time: int
      then:
        - globals.set:
            id: message
            value: !lambda 'return message;'
        - globals.set:
            id: message_alive_time
            value: !lambda 'return message_alive_time;'
        - globals.set:
            id: message_display_time
            value: !lambda 'return message_display_time;'
        - globals.set:
            id: message_clock_time
            value: !lambda 'return message_clock_time;'
        - globals.set:
            id: message_clock_time_count
            value: !lambda 'return message_clock_time;'
        - globals.set:
            id: message_alive_time_count
            value: '0'
        - logger.log:
            format: "Message: %s"
            args: [ 'message.c_str()' ]
        - logger.log:
            format: "Alive Time: %i / Display Time: %i / Clock Time: %i"
            args: [ 'message_alive_time', 'message_display_time' , 'message_clock_time' ]

mdns:
  disabled: false

logger:

ota:
  password: !secret ota_password

web_server:
  port: 80
  ota: true
  include_internal: true

captive_portal:

text_sensor:
  - platform: version
    name: "$friendly_name ESPHome Version"
    hide_timestamp: true
    entity_category: diagnostic
  - platform: wifi_info
    ip_address:
      id: wifi_ip
      name: "$friendly_name IP Address"
      entity_category: diagnostic
    ssid:
      id: wifi_ssid
      name: "$friendly_name SSID"
      entity_category: diagnostic
  - platform: template
    name: "$friendly_name $project_name Version"
    lambda: |-
      return {"$project_version"};
    entity_category: diagnostic
    update_interval: never

output:
  - platform: esp8266_pwm
    id: statusled
    pin:
      number: $status_led_pin
      inverted: true

light:
  - platform: monochromatic
    id: led1
    name: "LED"
    output: statusled
    internal: true

preferences:
  flash_write_interval: 15s # 0 does immediate write to memory with no mem buffer (not recommended) (only saves when persistent variables have changed)

i2c:
  sda: $sda_pin
  scl: $scl_pin
  scan: true
  id: i2cbus
  
# Check this section carefully!
# Also, some info how to handle multi_click options: https://community.home-assistant.io/t/esphome-button-held-double-press/136083/10
binary_sensor:
  - platform: status
    name: "$friendly_name Status"
  - platform: gpio
    pin:
      number: $up_button_pin
      inverted: true # Sinilink true / 303 true
      mode: INPUT_PULLUP
    name: "$friendly_name Up button"
    filters:
      - delayed_on: 10ms
      - delayed_off: 10ms
    on_multi_click:
      #Click UP will increase brightness
      - timing:
          - ON for at most 0.5s
          - OFF for at least 0.5s
        then:
          - number.increment: brightness_select
  - platform: gpio
    pin:
      number: $down_button_pin
      inverted: true # Sinilink true / 303 false
      mode: INPUT_PULLUP
    name: "$friendly_name Down button"
    filters:
      - delayed_on: 10ms
      - delayed_off: 10ms
    on_multi_click:
      #Click DOWN will decrease brightness
      - timing:
          - ON for at most 0.5s
          - OFF for at least 0.5s
        then:
          - number.decrement: brightness_select
      #Hold DOWN will select enable or disable time zone offset
      - timing:
          - ON for at least 1s
        then:
          - switch.toggle: tzoffset_on_select
  - platform: gpio
    pin: 
      number: $set_button_pin
      inverted: true # Sinilink true / 303 true
    name: "$friendly_name Set button"
    filters:
      - delayed_on: 10ms
      - delayed_off: 10ms
    on_multi_click:
      #Click SET will toggle 12-hour mode
      - timing:
          - ON for at most 0.5s
          - OFF for at least 0.5s
        then:
          - switch.toggle: hour12_select
      #Hold SET 1s will show the IP Address
      - timing:
          - ON for at least 1s
        then:
          - button.press: display_ip
      #Hold SET 5s will toggle the wifi timeout
      - timing:
          - ON for at least 5s
        then:
          - switch.toggle: wifi_stop_seek_select

# This section contains a lot of lambda code... if using the Sinilink or 303, you shouldn't have to edit this at all
# If using something else, you may need to edit the segmentmap sections (conveniently 'if' sections), depending on how the decimals/colons are handled
# If that's true, get back to me on github by opening an issue and help contribute to other displays this YAML can handle!
display:
  - platform: tm1650
    id: disp_tm1650
    i2c_id: i2cbus
    length: 4
    segment_map: $segment_mapping
    update_interval: 1s
    lambda: |-
      // Display the message if all conditions are met
      if (id(my_time).now().is_valid()) {
        if ((id(message_alive_time) != 0) && (id(message_clock_time_count) >= id(message_clock_time))) {
          id(message_display_time_count) += 1;
          id(message_alive_time_count) += 1;
          auto message_text = id(message);
          it.print(0, message_text.c_str());
          if (id(message_display_time_count) >= id(message_display_time)) {
            id(message_display_time_count) = 0;
            id(message_clock_time_count) = 0;
            if (id(message_alive_time_count) >= id(message_alive_time)) {
              id(message_alive_time_count) = 0;
              id(message_alive_time) = 0;
              ESP_LOGD("main", "Message Alive Time finished.");
            }
          }
        } else {
          if ((id(message_alive_time) != 0) && (id(message_clock_time) != 0)) {
            id(message_clock_time_count) += 1;
            id(message_alive_time_count) += 1;
          }
          static int blinking = 0;
          int offset = 0;
          if (id(tzoffset_on) != 0) {
            offset = (int)(60*60*(id(tzoffset)));
          }
          std::time_t tz1time = (id(my_time).now().timestamp+offset);
          std::tm *tz1time_astm = localtime(&tz1time);
          // check if the date should be displayed
          if ((id(date_display_time_count) >= (id(date_display_interval))) && (id(date_display_mode) != 0)) {
            id(date_display_count) += 1;
            // display date
            int tzmon = (tz1time_astm->tm_mon) + 1;
            int tzmday = tz1time_astm->tm_mday;
            std::string timemon_text = std::to_string(tzmon);
            std::string timemday_text = std::to_string(tzmday);
            std::string mon_a = (timemon_text.substr(0,1).c_str());
            std::string mon_b = (timemon_text.substr(1,1).c_str());
            std::string mday_a = (timemday_text.substr(0,1).c_str());
            std::string mday_b = (timemday_text.substr(1,1).c_str());
            if (tzmon < 10) {
              mon_b = mon_a;
              mon_a = "0";
            }
            if (tzmday < 10) {
              mday_b = mday_a;
              mday_a = "0";
            }
            if (id(date_display_mode_us) != 0) {
              it.print(0, mday_a.c_str());
              it.print(1, mday_b.c_str());
              it.print(2, mon_a.c_str());
              it.print(3, mon_b.c_str());
            } else {
              it.print(0, mon_a.c_str());
              it.print(1, mon_b.c_str());
              it.print(2, mday_a.c_str());
              it.print(3, mday_b.c_str());
            }
            if (id(date_display_count) >= id(date_display_time)) {
              id(date_display_time_count) = 0;
            }
          } else {
            id(date_display_count) = 0;
            // display time
            if (id(date_display_mode) != 0) {
              id(date_display_time_count) += 1;
            }
            int tzhr = tz1time_astm->tm_hour;
            int tzmin = tz1time_astm->tm_min;
            std::string timeh_text = std::to_string(tzhr);
            std::string timem_text = std::to_string(tzmin);
            std::string hour_a = (timeh_text.substr(0,1).c_str());
            std::string hour_b = (timeh_text.substr(1,1).c_str());
            std::string min_a = (timem_text.substr(0,1).c_str());
            std::string min_b = (timem_text.substr(1,1).c_str());
            if (tzmin < 10) {
              min_b = min_a;
              min_a = "0";
            }
            if (id(hour12_mode) == 1) {
              if (tzhr > 12) {
                timeh_text = std::to_string((tz1time_astm->tm_hour) - 12);
                hour_a = (timeh_text.substr(0,1).c_str());
                hour_b = (timeh_text.substr(1,1).c_str());
              }
              if ((tzhr < 22 && tzhr > 12) || (tzhr < 10)) {
                hour_b = hour_a;
                hour_a = " ";
              }
              if (tzhr == 0) {
                hour_a = "1";
                hour_b = "2";
              }
              if (tzhr > 11) {
                if (id(segmentmap) == "GBPEDCAF") {
                  min_b.append("."); // the 303 can have a decimal after the 4th digit to indicate PM
                }
                if (id(segmentmap) == "PGFEDCBA") {
                  hour_b.append("."); // the Sinilink can have a decimal after the 2nd digit to indicate PM
                }
              }
            } else {
              if (tzhr < 10) {
                hour_b = hour_a;
                hour_a = "0";
              }
            }
            if (((++blinking & 1) && (id(blink_option) == 1)) || (id(blink_option) == 2)) {
              if (id(segmentmap) == "GBPEDCAF") {
                hour_b.append("."); // the 303 requires a period between the 2nd and 3rd digit to activate the colon
              }
              if (id(segmentmap) == "PGFEDCBA") {
                min_a.append(".");
                min_b.append("."); // the Sinilink requires periods after the 3rd and 4th digits to activate the colon
              }
            }
            it.print(0, hour_a.c_str());
            it.print(1, hour_b.c_str());
            it.print(2, min_a.c_str());
            it.print(3, min_b.c_str());
          }
        }
      } else {
        it.print("$waiting");
      }
      id(disp_tm1650)->set_intensity(id(brightness_level));

interval:
  - interval: 1min # check if the time should be synced, and if so, do it
    then:
      lambda: |-
        id(sync_time_count) += 1;
        if (id(sync_time_count) >= (id(sync_time) * 60)) {
          id(sync_time_count) = 0;
          if (id(wifi_id).is_connected()) {
            id(my_time)->update();
          }
        }
  - interval: 1s # check if the wifi should be turned off, and if so, do it (or turn on if stop seek has been disabled) and blink led while seeking wifi
    then:
      - lambda: |-
          if (id(wifi_stop_seek) == 1 && !id(wifi_id).is_connected() && !id(wifi_id).is_disabled()){
            id(wifi_stop_seek_time_count) += 1;
            if (id(wifi_stop_seek_time_count) >= id(wifi_stop_seek_time)) {
              id(wifi_stop_seek_time_count) = 0;
              id(led1).turn_off();
              id(wifi_id)->disable();
              id(display_ip).press();
            }
          } else {
            if (id(wifi_stop_seek) == 0 && id(wifi_id).is_disabled()) {
              id(wifi_stop_seek_time_count) = 0;
              id(wifi_id)->enable();
              id(display_ip).press();
            }
          }
          static int blinkled = 0;
          if (!id(wifi_id).is_connected() && !id(wifi_id).is_disabled()) {
            if (id(wifi_stop_seek) == 0) {
              auto call = id(led1).toggle();
              call.perform();
              //id(led1).toggle();
            } else {
              if (++blinkled & 1) {
                auto call = id(led1).toggle();
                call.perform();
              }
            }
          }

globals:
   - id: brightness_level
     type: int
     restore_value: true
     initial_value: '1'
   - id: hour12_mode
     type: bool
     restore_value: true
     initial_value: 'false'
   - id: tzoffset
     type: float
     restore_value: true
     initial_value: '0'
   - id: tzoffset_on
     type: bool
     restore_value: true
     initial_value: 'false'
   - id: message
     type: std::string
     restore_value: false
     initial_value: ''
   - id: message_display_time
     type: int
     restore_value: false
     initial_value: '0'
   - id: message_clock_time
     type: int
     restore_value: false
     initial_value: '0'
   - id: message_alive_time
     type: int
     restore_value: false
     initial_value: '0'
   - id: message_display_time_count
     type: int
     restore_value: false
     initial_value: '0'
   - id: message_clock_time_count
     type: int
     restore_value: false
     initial_value: '0'
   - id: message_alive_time_count
     type: int
     restore_value: false
     initial_value: '0'
   - id: segmentmap
     type: std::string
     restore_value: false
     initial_value: ''
   - id: IPAddressA
     type: int
     restore_value: false
     initial_value: '0'
   - id: IPAddressB
     type: int
     restore_value: false
     initial_value: '0'
   - id: IPAddressC
     type: int
     restore_value: false
     initial_value: '0'
   - id: IPAddressD
     type: int
     restore_value: false
     initial_value: '0'
   - id: alarms_on
     type: bool
     restore_value: true
     initial_value: 'false'
   - id: blink_option
     type: int
     restore_value: true
     initial_value: '1'
   - id: date_display_mode
     type: bool
     restore_value: true
     initial_value: 'false'
   - id: date_display_mode_us
     type: bool
     restore_value: true
     initial_value: 'false'
   - id: date_display_interval
     type: int
     restore_value: true
     initial_value: '8'
   - id: date_display_time
     type: int
     restore_value: true
     initial_value: '2'
   - id: date_display_time_count
     type: int
     restore_value: false
     initial_value: '0'
   - id: date_display_count
     type: int
     restore_value: false
     initial_value: '0'
   - id: sync_time
     type: int
     restore_value: true
     initial_value: '8'
   - id: sync_time_count
     type: int
     restore_value: false
     initial_value: '0'
   - id: wifi_stop_seek
     type: bool
     restore_value: true
     initial_value: 'false'
   - id: wifi_stop_seek_time
     type: int
     restore_value: true
     initial_value: '180'
   - id: wifi_stop_seek_time_count
     type: int
     restore_value: false
     initial_value: '0'

button:
  - platform: restart
    id: "Restart"
    internal: true
  - platform: template
    id: display_ip
    name: "Display IP Address"
    internal: true
    on_press:
      - if:
          condition:
            not:
              wifi.connected:
          then:
            - lambda: |-
                if (id(wifi_id).is_disabled()) {
                  id(message) = ("Off");
                } else {
                  id(message) = ("noIP");
                }
                id(message_alive_time) = 3;
                id(message_display_time) = 3;
                id(message_clock_time) = 0;
          else:
            - lambda: |-
                // int IPA[3], IPB[3], IPC[3], IPD[3];
                int IPA, IPB, IPC, IPD;
                sscanf((id(wifi_ip).state.c_str()), "%d.%d.%d.%d", &IPA, &IPB, &IPC, &IPD);
                id(IPAddressA) = IPA;
                id(IPAddressB) = IPB;
                id(IPAddressC) = IPC;
                id(IPAddressD) = IPD;
                id(message_alive_time) = 2;
                id(message_display_time) = 2;
                id(message_clock_time) = 0;
                id(message) = "IP";
            - delay: 2s
            - lambda: |-
                id(message_alive_time) = 2;
                id(message_display_time) = 2;
                id(message) = to_string(id(IPAddressA));
            - delay: 2s
            - lambda: |-
                id(message_alive_time) = 2;
                id(message_display_time) = 2;
                id(message) = to_string(id(IPAddressB));
            - delay: 2s
            - lambda: |-
                id(message_alive_time) = 2;
                id(message_display_time) = 2;
                id(message) = to_string(id(IPAddressC));
            - delay: 2s
            - lambda: |-
                id(message_alive_time) = 2;
                id(message_display_time) = 2;
                id(message) = to_string(id(IPAddressD));

switch:
  - platform: template
    name: "$friendly_name 12 Hour Mode"
    id: hour12_select
    restore_mode: RESTORE_DEFAULT_OFF
    lambda: |-
      if (id(hour12_mode)) {
        return true;
      } else {
        return false;
      }
    turn_on_action:
        lambda: |-
          id(hour12_mode) = true;
    turn_off_action:
        lambda: |-
          id(hour12_mode) = false;
  - platform: template
    name: "$friendly_name Date Display US Mode (DDMM)"
    id: date_display_mode_us_select
    restore_mode: RESTORE_DEFAULT_OFF
    lambda: |-
      if (id(date_display_mode_us)) {
        return true;
      } else {
        return false;
      }
    turn_on_action:
        lambda: |-
          id(date_display_mode_us) = true;
    turn_off_action:
        lambda: |-
          id(date_display_mode_us) = false;
  - platform: template
    name: "$friendly_name Time Zone Offset On"
    id: tzoffset_on_select
    restore_mode: RESTORE_DEFAULT_OFF
    lambda: |-
      if (id(tzoffset_on)) {
        return true;
      } else {
        return false;
      }
    turn_on_action:
        lambda: |-
          id(tzoffset_on) = true;
    turn_off_action:
        lambda: |-
          id(tzoffset_on) = false;
  - platform: template
    name: "$friendly_name Date Display Mode"
    id: date_mode_select
    restore_mode: RESTORE_DEFAULT_OFF
    lambda: |-
      if (id(date_display_mode)) {
        return true;
      } else {
        return false;
      }
    turn_on_action:
        - lambda: |-
            id(date_display_mode) = true;
            id(message) = ("dton");
            id(message_alive_time) = 1;
            id(message_display_time) = 1;
            id(message_clock_time) = 0;
    turn_off_action:
        - lambda: |-
            id(date_display_mode) = false;
            id(message) = ("doff");
            id(message_alive_time) = 1;
            id(message_display_time) = 1;
            id(message_clock_time) = 0;
  - platform: template
    name: "$friendly_name Wifi Stop Seek"
    id: wifi_stop_seek_select
    restore_mode: RESTORE_DEFAULT_OFF
    lambda: |-
      if (id(wifi_stop_seek)) {
        return true;
      } else {
        return false;
      }
    turn_on_action:
        - delay: 1s
        - lambda: |-
            id(wifi_stop_seek) = true;
            id(message) = ("stop");
            id(message_alive_time) = 1;
            id(message_display_time) = 1;
            id(message_clock_time) = 0;
    turn_off_action:
        - delay: 1s
        - lambda: |-
            id(wifi_stop_seek) = false;
            id(message) = ("seeH");
            id(message_alive_time) = 1;
            id(message_display_time) = 1;
            id(message_clock_time) = 0;

select:
  - platform: template
    name: "$friendly_name Colon Blink (0=Off / 1=On / 2=Always On)"
    id: blink_option_select
    restore_value: true
    optimistic: true
    options:
      - '0'
      - '1'
      - '2'
    initial_option: '1'
    on_value:
      then:
        lambda: |-
          id(blink_option) = atoi(x.substr(0,2).c_str());
          ESP_LOGD("main", "Colon Blink: %d", id(blink_option));

number:
  - platform: template
    name: "$friendly_name Brightness"
    id: brightness_select
    restore_value: true
    optimistic: true
    step: 1
    min_value: 0
    max_value: 8
    initial_value: 1
    mode: slider
    set_action:
      then:
        lambda: |-
          id(brightness_level) = x;
          ESP_LOGD("main", "Brightness: %d", id(brightness_level));
  - platform: template
    name: "$friendly_name Date Display Interval"
    id: date_display_interval_select
    restore_value: true
    optimistic: true
    step: 1
    min_value: 1
    max_value: 60
    initial_value: 8
    mode: box
    unit_of_measurement: seconds
    set_action:
      then:
        lambda: |-
          id(date_display_interval) = x;
          ESP_LOGD("main", "Date Display Interval: %d", id(date_display_interval));
  - platform: template
    name: "$friendly_name Date Display Time"
    id: date_display_time_select
    restore_value: true
    optimistic: true
    step: 1
    min_value: 1
    max_value: 60
    initial_value: 2
    mode: box
    unit_of_measurement: seconds
    set_action:
      then:
        lambda: |-
          id(date_display_time) = x;
          ESP_LOGD("main", "Date Display Time: %d", id(date_display_time));
  - platform: template
    name: "$friendly_name Time Zone Offset"
    id: tzoffset_select
    restore_value: true
    optimistic: true
    step: 0.25
    min_value: -26
    max_value: 26
    initial_value: 0
    mode: box
    unit_of_measurement: hours
    set_action:
      then:
        lambda: |-
          id(tzoffset) = x;
          ESP_LOGD("main", "Time Zone Offset: %.2f", id(tzoffset));
  - platform: template
    name: "$friendly_name Time Sync Interval (hours)"
    id: sync_time_select
    restore_value: true
    optimistic: true
    step: 1
    min_value: 1
    max_value: 24
    mode: box
    set_action:
      then:
        lambda: |-
          id(sync_time) = x;
          ESP_LOGD("main", "Time Sync Interval (hours): %d", id(sync_time));
  - platform: template
    name: "$friendly_name Wifi Stop Seek Time (seconds)"
    id: wifi_stop_seek_time_select
    restore_value: true
    optimistic: true
    step: 5
    min_value: 60
    max_value: 300
    mode: box
    set_action:
      then:
        lambda: |-
          id(sync_time) = x;
          ESP_LOGD("main", "Wifi Stop Seek Time (seconds): %d", id(wifi_stop_seek_time));