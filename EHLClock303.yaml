substitutions:
  name: 303-clock
  friendly_name: 303-Clock
  waiting: "ehLC" # shows when waiting for time
# SCL & SDA are same for Sinilink and 303 Clocks
  scl_pin: GPIO12
  sda_pin: GPIO13

# Mappings are the order of the LED segments. Using the wrong mapping will result in a garbled display!
  segment_mapping: GBPEDCAF # Specific to 303WIFILC01

# 303 Clock uses these pins for buttons
  down_button_pin: GPIO15
  up_button_pin: GPIO4
  set_button_pin: GPIO0

# Sinilink and 303 both have a Red LED (Same GPIO)
  red_led_pin: GPIO2

esphome:
  name: $name
  comment: "EHLClock from Trip5"
  project:
    name: "Trip5.EspHomeLedClock"
    version: "2023.08.26"
  on_boot:
    then:
# The 303 uses a DS1302 RTC (will also require an external component)
      - ds1302.read_time:
      - globals.set:
          id: segmentmap
          value: !lambda 'return "$segment_mapping";'

esp8266:
  board: esp8285
  restore_from_flash: True
  
wifi:
  networks:
  - ssid: !secret wifi_ssid
    password: !secret wifi_password
  ap:
    ssid: "$name Hotspot"
    password: !secret ap_password

external_components:
# Use Trip5's fork of Buzzer13's TM1650 ESPHome Component
  - source:
      type: git
      url: https://github.com/trip5/esphome-tm1650
      ref: main
    refresh: 60s
    components: [ tm1650 ]

# The 303 Clock has a DS1302 RTC (uncomment this section to use it)
  - source:
      type: git
      url: https://github.com/trip5/esphome-ds1302
      ref: main
    refresh: 60s
    components: [ ds1302 ]

time:
  - platform: sntp
# If you would rather use Home Assistant as a time source, delete the above line and uncomment the next line (but sntp means you can take your clock anywhere)
#  - platform: homeassistant
    timezone: "Asia/Seoul" # Check https://en.wikipedia.org/wiki/List_of_tz_database_time_zones
    update_interval: 8h
#    id: my_time # one platform must contain id: my_time (so if you don't have an RTC or delete all references to the RTC, uncomment this line)
    on_time_sync:
      then:
# The 303 Clock uses a DS1302 RTC
        ds1302.write_time:

# The 303 Clock uses a DS1302 RTC
  - platform: ds1302
    id: my_time
    cs_pin: GPIO5
    dio_pin: GPIO14
    clk_pin: GPIO16
    update_interval: never

# The next section interacts with Home Assistant - it's possible the device doesn't need Home Assistant, in which case delete this whole section and make the sure the Time Source
api:
  services:
# This next section creates the Home Assistant services to allow messages to be displayed
    - service: message
      variables:
        message: string
        message_alive_time: int
        message_display_time: int
        message_clock_time: int
      then:
        - globals.set:
            id: message
            value: !lambda 'return message;'
        - globals.set:
            id: message_alive_time
            value: !lambda 'return message_alive_time;'
        - globals.set:
            id: message_display_time
            value: !lambda 'return message_display_time;'
        - globals.set:
            id: message_clock_time
            value: !lambda 'return message_clock_time;'
        - globals.set:
            id: message_clock_time_count
            value: !lambda 'return message_clock_time;'
        - globals.set:
            id: message_alive_time_count
            value: '0'
        - logger.log:
            format: "Message: %s"
            args: [ 'message.c_str()' ]
        - logger.log:
            format: "Alive Time: %i / Display Time: %i / Clock Time: %i"
            args: [ 'message_alive_time', 'message_display_time' , 'message_clock_time' ]

mdns:
  disabled: false

logger:

ota:
  password: !secret ota_password

web_server:
  port: 80
  ota: true
  include_internal: true

captive_portal:

text_sensor:
  - platform: version
    name: "ESPHome Version"
    hide_timestamp: true
    internal: true
  - platform: wifi_info
    ip_address:
      id: wifi_ip
      name: "$friendly_name IP Address"
    ssid:
      id: wifi_ssid
      name: "$friendly_name SSID"

status_led:
  pin:
    number: $red_led_pin
    inverted: true

preferences:
  flash_write_interval: 15s # 0 does immediate write to memory with no mem buffer (not recommended)

i2c:
  sda: $sda_pin
  scl: $scl_pin
  scan: true
  id: i2cbus
  
# Check this section!
# Also, some info how to handle multi_click options: https://community.home-assistant.io/t/esphome-button-held-double-press/136083/10
binary_sensor:
  - platform: status
    name: "$friendly_name Status"
  - platform: gpio
    pin:
      number: $up_button_pin
      inverted: true # Sinilink true / 303 true
      mode: INPUT_PULLUP
    name: "$friendly_name Up button"
    filters:
      - delayed_on: 10ms
      - delayed_off: 10ms
    on_multi_click:
      #Click UP will increase brightness
      - timing:
          - ON for at most 0.5s
          - OFF for at least 0.5s
        then:
          - select.next: brightness_select
  - platform: gpio
    pin:
      number: $down_button_pin
      inverted: false # Sinilink true / 303 false
      mode: INPUT_PULLUP
    name: "$friendly_name Down button"
    filters:
      - delayed_on: 10ms
      - delayed_off: 10ms
    on_multi_click:
      #Click DOWN will decrease brightness
      - timing:
          - ON for at most 0.5s
          - OFF for at least 0.5s
        then:
          - select.previous: brightness_select
  - platform: gpio
    pin: 
      number: $set_button_pin
      inverted: true # Sinilink true / 303 true
    name: "$friendly_name Set button"
    filters:
      - delayed_on: 10ms
      - delayed_off: 10ms
    on_multi_click:
      #Click SET will toggle 12-hour mode
      - timing:
          - ON for at most 0.5s
          - OFF for at least 0.5s
        then:
          - switch.toggle: hour12_select
      #Hold SET will show the IP Address
      - timing:
          - ON for at least 1s
        then:
          - button.press: display_ip

# This section contains a lot of lambda code... if using the Sinilink or 303, you shouldn't have to edit this at all
# If using something else, you may need to edit the segmentmap sections (conveniently 'if' sections), depending on how the decimals/colons are handled
# If that's true, get back to me on github by opening an issue and help contribute to other displays this YAML can handle!
display:
  - platform: tm1650
    id: disp_tm1650
    i2c_id: i2cbus
    length: 4
    segment_map: $segment_mapping
    update_interval: 1s
    # %H%M for 24 hours, %l%M for 12 hours
    lambda: |-
      // Display the message if all conditions are met
      if (id(my_time).now().is_valid()) {
        if ((id(message_alive_time) != 0) && (id(message_clock_time_count) >= id(message_clock_time))) {
          id(message_display_time_count) += 1;
          id(message_alive_time_count) += 1;
          auto message_text = id(message);
          it.print(0, message_text.c_str());
          if (id(message_display_time_count) >= id(message_display_time)) {
            id(message_display_time_count) = 0;
            id(message_clock_time_count) = 0;
            if (id(message_alive_time_count) >= id(message_alive_time)) {
              id(message_alive_time_count) = 0;
              id(message_alive_time) = 0;
              ESP_LOGD("main", "Message Alive Time finished.");
            }
          }
        } else {
          if ((id(message_alive_time) != 0) && (id(message_clock_time) != 0)) {
            id(message_clock_time_count) += 1;
            id(message_alive_time_count) += 1;
          }
          static int blinking = 0;
          auto timem_text = id(my_time).now().strftime("%M");
          std::string min_a = (timem_text.substr(0,1).c_str());
          std::string min_b = (timem_text.substr(1,1).c_str());
          auto timeh_text = id(my_time).now().strftime("%H");
          std::string hour_a = (timeh_text.substr(0,1).c_str());
          std::string hour_b = (timeh_text.substr(1,1).c_str());
          if (id(hour12_mode) == 1) {
            timeh_text = id(my_time).now().strftime("%l");
            hour_a = (timeh_text.substr(0,1).c_str());
            hour_b = (timeh_text.substr(1,1).c_str());
            if (id(my_time).now().hour > 11) {
              if (id(segmentmap) == "GBPEDCAF") {
                min_b.append("."); // the 303 can have a decimal after the 4th digit to indicate PM
              }
              if (id(segmentmap) == "PGFEDCBA") {
                hour_b.append("."); // the Sinilink can have a decimal after the 2nd digit to indicate PM
              }
            }
          }
          if (++blinking & 1) {
            if (id(segmentmap) == "GBPEDCAF") {
              hour_b.append("."); // the 303 requires a period between the 2nd and 3rd digit to activate the colon
            }
            if (id(segmentmap) == "PGFEDCBA") {
              min_a.append(".");
              min_b.append("."); // the Sinilink requires periods after the 3rd and 4th digits to activate the colon
            }
          }
          it.print(0, hour_a.c_str());
          it.print(1, hour_b.c_str());
          it.print(2, min_a.c_str());
          it.print(3, min_b.c_str());
        }
      } else {
        it.print("$waiting");
      }
      id(disp_tm1650)->set_intensity(id(brightness_level));

# Example configuration entry
globals:
   - id: brightness_level
     type: int
     restore_value: true
     initial_value: '1'
   - id: hour12_mode
     type: bool
     restore_value: true
     initial_value: 'false'
   - id: message
     type: std::string
     restore_value: false
     initial_value: ''
   - id: message_display_time
     type: int
     restore_value: false
     initial_value: '0'
   - id: message_clock_time
     type: int
     restore_value: false
     initial_value: '0'
   - id: message_alive_time
     type: int
     restore_value: false
     initial_value: '0'
   - id: message_display_time_count
     type: int
     restore_value: false
     initial_value: '0'
   - id: message_clock_time_count
     type: int
     restore_value: false
     initial_value: '0'
   - id: message_alive_time_count
     type: int
     restore_value: false
     initial_value: '0'
   - id: segmentmap
     type: std::string
     restore_value: false
     initial_value: ''
   - id: IPAddressA
     type: int
     restore_value: false
     initial_value: '0'
   - id: IPAddressB
     type: int
     restore_value: false
     initial_value: '0'
   - id: IPAddressC
     type: int
     restore_value: false
     initial_value: '0'
   - id: IPAddressD
     type: int
     restore_value: false
     initial_value: '0'
   - id: alarms_on
     type: bool
     restore_value: true
     initial_value: 'false'

button:
  - platform: restart
    id: "Restart"
    internal: true
  - platform: template
    id: display_ip
    name: "Display IP Address"
    internal: true
    on_press:
      - lambda: |-
          // int IPA[3], IPB[3], IPC[3], IPD[3];
          int IPA, IPB, IPC, IPD;
          sscanf((id(wifi_ip).state.c_str()), "%d.%d.%d.%d", &IPA, &IPB, &IPC, &IPD);
          id(IPAddressA) = IPA;
          id(IPAddressB) = IPB;
          id(IPAddressC) = IPC;
          id(IPAddressD) = IPD;
          id(message_alive_time) = 2;
          id(message_display_time) = 2;
          id(message_clock_time) = 0;
          id(message) = "IP";
      - delay: 2s
      - lambda: |-
          id(message_alive_time) = 2;
          id(message_display_time) = 2;
          id(message) = to_string(id(IPAddressA));
      - delay: 2s
      - lambda: |-
          id(message_alive_time) = 2;
          id(message_display_time) = 2;
          id(message) = to_string(id(IPAddressB));
      - delay: 2s
      - lambda: |-
          id(message_alive_time) = 2;
          id(message_display_time) = 2;
          id(message) = to_string(id(IPAddressC));
      - delay: 2s
      - lambda: |-
          id(message_alive_time) = 2;
          id(message_display_time) = 2;
          id(message) = to_string(id(IPAddressD));

switch:
  - platform: template
    name: "$friendly_name 12 Hour Mode"
    id: hour12_select
    restore_mode: RESTORE_DEFAULT_OFF
    lambda: |-
      if (id(hour12_mode)) {
        return true;
      } else {
        return false;
      }
    turn_on_action:
        lambda: |-
          id(hour12_mode) = true;
    turn_off_action:
        lambda: |-
          id(hour12_mode) = false;

select:
  - platform: template
    name: "$friendly_name Brightness"
    id: brightness_select
    restore_value: true
    optimistic: true
    options:
      - '0'
      - '1'
      - '2'
      - '3'
      - '4'
      - '5'
      - '6'
      - '7'
      - '8'
    initial_option: '1'
    on_value:
      then:
        lambda: |-
          id(brightness_level) = atoi(x.c_str());
          ESP_LOGD("main", "Brightness: %d", id(brightness_level));
